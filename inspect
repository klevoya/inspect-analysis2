#!/usr/bin/env python3
import sys,os,glob
import subprocess
import time
import csv
import shutil

def string_from_long(action):
    charmap = ['.','1','2','3','4','5','a','b','c','d','e','f','g','h','i',
                'j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    str = [None] * 13
    try:
    	tmp = int(action)
    except ValueError:
    	return action
    	
    for i in range(13):
        c = charmap[int(tmp & (0x0f if i == 0 else 0x1f))]
        str[12-i] = c
        tmp >>= (4 if i == 0 else 5)
    out_str = ''.join(str)
    return out_str.split('.', 1)[0]

start_time = time.time()

database_dir = "database"
artefacts_dir = "artefacts"

# create if not exists
if not os.path.exists(database_dir):
    os.makedirs(database_dir)

if not os.path.exists(artefacts_dir):
    os.makedirs(artefacts_dir)

# clean up 
subprocess.call("rm -rf " + database_dir + '/*', shell=True)
subprocess.call("rm -rf " + artefacts_dir + '/*', shell=True)

# call inspect decompiler & souffle logic
subprocess.call("java -jar binaries/inspect.jar --keep-artefacts -w " + artefacts_dir + " -d -i " + sys.argv[1], shell=True)
subprocess.call("souffle souffle_logic/main.dl -F " + artefacts_dir + "/* -D "+ database_dir, shell=True)

# call action name parser for each action
action_name = {}
with open(database_dir + "/ActionCondition.csv") as file:
	reader = csv.reader(file, delimiter='	')
	for row in reader:
		action_name[row[0]] = string_from_long(row[1])


# print result
END = "\033[0m"

def warn(line):
	return "\033[1;31m" + line + END

def nuetral(line):
	return "\033[90m" + line + END

def good(line):
	return "\033[1;32m" + line + END

def bold(line):
	return "\033[1m" + line + END

def print_result(violation_file):
	
	with open(os.path.join(database_dir, violation_file)) as file:
		
		reader = csv.reader(file, delimiter='	')
		basename = os.path.basename(violation_file).split(".")[0] + ": "
		reader = [i for i in reader]
		print(warn(basename + u'\u2718') if len(reader) else good(basename + u'\u2713')) 

		for row in reader:
			print(nuetral("Action: ") + action_name[row[0]] if row[0] in action_name else row[0], end="	")
			rest = nuetral("Insn: ") + row[1] if len(row) > 1 else ""
			rest += nuetral("\tTable: ") + string_from_long(row[2]) if len(row) > 2 else ""
			print(rest)
	print()

def print_action_name(action_name):
    for func in action_name:
        print(func, "->", action_name[func])
    print()

print("Action Names:")
print_action_name(action_name)

print(bold("Analysis Result\n"))
print_result("AuthViolation.csv")
print_result("RollbackViolation.csv")
print_result("FakeTokenViolation.csv")
print_result("FakeNotifyViolation.csv")
print_result("SeperationViolation.csv")
print_result("OverflowViolation.csv")
print_result("UnboundedViolation.csv")

run_time = time.time() - start_time
run_time_m = str(int(run_time // 60)) + "m "if run_time // 60 > 0 else ""
run_time_s = str(int(run_time % 60)) + "s"
# not needed atm, cuz most test cases are under 1 sec
print(bold("Run Time: ") + run_time_m + run_time_s + END)
print()
