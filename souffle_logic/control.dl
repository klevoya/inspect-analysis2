#include "input.dl"
#include "CFGDom.dl"

/***********
** Output **
************/

#if DEBUG
	#if VERBOSE
		.output FuncEntry
		.output BasicBlockBegin
		.output BBInFunc
		.output BasicBlockEnd
		.output NextBasicBlock
		.output LastBB
		.output NotDominateBB
	#endif
	.output IfElse
	.output Merge
	.output ReachableInBB
	.output BasicBlockHead
	.output NextInSameBasicBlock
	.output DominateBB
	.output ReachableBtwBB
	.output Loop
	.output BBInLoop
	.output ExitLoop
#endif

/************/

/*********************
** Preprocess input **
**********************/

/* linear insns: prev -> to */
.decl Follows(prev: Insn, to: Insn)

Follows(prev, to):-
	_Follows(prev, to),
	!_Goto(prev, _),
	!_BranchTable(prev, _, _).


/* conditional branching: from -> to */ 
.decl IfElse(from: Insn, to: Insn)

// if/else branching
IfElse(if, to):-
	_Branch(if, to, _, _);
	_Branch(if, _, to, _).

// table branching
IfElse(if, to):-
	_BranchTable(if, to, _).


/* merging insn */ 
.decl Merge(merge: Insn)

// uncondtional
Merge(merge):-
	_Goto(_, merge).

//conditional
Merge(merge):-
	_EndIf(_, merge).

// table merge
Merge(merge):-
	_BranchTable(_, merge, _).


/* function defintion as the entry insn */
.decl FuncEntry(func: Function, firstInsn: Insn)

FuncEntry(func, insn):-
	_FormalArgs(insn, func, _, _).


/****************
** Basic Block **
*****************/

/* Begining of each basic blcok*/
.decl BasicBlockBegin(begin: Insn)

// begin of function,
BasicBlockBegin(insn):-
	FuncEntry(_, insn).

// If/Else block
BasicBlockBegin(insn):-
	IfElse(_, insn).

// Merge block
BasicBlockBegin(insn):-
	Merge(insn).


/* next insn wihtin the same basic block */
.decl NextInSameBasicBlock(insn: Insn, next: Insn)

// BB: 1 -> 2 -> 3

// 1, 2
// 2, 3
NextInSameBasicBlock(insn, next):-
	Follows(insn, next),
	!BasicBlockBegin(next).


/* insn belongs to a basic block with head */
.decl BasicBlockHead(head: Insn, insn: Insn)

// 1, 1
// 1, 2
// 1, 3
BasicBlockHead(insn, insn):-
	BasicBlockBegin(insn).

BasicBlockHead(head, next) :-
   BasicBlockHead(head, insn),
   NextInSameBasicBlock(insn, next).


/* last insn in basic block*/
.decl BasicBlockEnd(end: Insn)

// 3
BasicBlockEnd(end):-
	BasicBlockHead(_, end),
	!NextInSameBasicBlock(end, _).


/* next basic block: prev -> next*/
.decl NextBasicBlock(prev: Insn, next: Insn)

// Constructing CFG of basic blocks
// BB1: 1 -> 2(jump BB2)
// BB2: 3 -> 4

// 1, 3
NextBasicBlock(prevBB, nextBB):-
	// 1, 2
	BasicBlockHead(prevBB, prevEnd), 
	// 2
	BasicBlockEnd(prevEnd), 
	// 3
	BasicBlockBegin(nextBB), 
	// 2, 3
	IfElse(prevEnd, nextBB).

// merging point
// 1 -> 2 -> 5
// 1 -> 3 -> 5
NextBasicBlock(prevBB, nextBB):-
	// 5
	Merge(nextBB), 
	// 2 | 3
	BasicBlockEnd(prevEnd),
	BasicBlockHead(prevBB, prevEnd),
	// 2, 5 | 3, 5
	(Follows(prevEnd, nextBB);
	_Goto(prevEnd, nextBB);
	_Branch(_, prevEnd, nextBB, _);
	_BranchTable(prevEnd, nextBB, _)).


/* all basic blocks within a function*/
.decl BBInFunc(insn: Insn, func: Function)

BBInFunc(insn, func):-
	BasicBlockBegin(insn),
	_FuncInsn(func, insn).


/* last basic block in a function */
.decl LastBB(bb: Insn, func: Function)

LastBB(bb, func):-
	BBInFunc(bb, func),
	!NextBasicBlock(bb, _).


/**************
** Dominance **
***************/

/** Example: 
	A
	| \
	|  B
	| /
	C

	Dom:
	A -> B
	B -> C
	A -> C
**/

/* insn2 does not dominate insn1 */
.decl NotDominateBB(insn1: Insn, insn2: Insn)

// bb does not dominate start
// A, B
// A, C
NotDominateBB(start, bb):- 
    FuncEntry(func, start), 
    BBInFunc(bb, func),
    bb != start.

// B, C | C, B
NotDominateBB(next, bb):- 
    NotDominateBB(prev, bb), // A, B | A, C
    NextBasicBlock(prev, next), // A, C | A, B
    next != bb. // for the loop


/* dom dominates insn */
.decl DominateBB(dom: Insn, insn: Insn)

// A, B
// A, C
DominateBB(dominator, bb):-
	BBInFunc(dominator, func),
	BBInFunc(bb, func),
	dominator != bb,
	!NotDominateBB(bb, dominator).


/*****************
** Reachability **
******************/

/* instruction reachability within basic block: insn1 -> ... -> insn2 */
/* can be restricted to only when in query for performance(e.g. require_auth and dbOps block) */
.decl ReachableInBB(insn1: Insn, insn2: Insn)

ReachableInBB(insn, insn):-
	BasicBlockHead(_, insn).

ReachableInBB(insn, next):-
	ReachableInBB(insn, mid),
	NextInSameBasicBlock(mid, next).

/* basic block reachability: from -> ... -> to */
.decl ReachableBtwBB(from: Insn, to: Insn)

ReachableBtwBB(from, to):-
	NextBasicBlock(from, to).

ReachableBtwBB(from, to):-
	ReachableBtwBB(from, mid),
	ReachableBtwBB(mid, to).

/**********
** Loops **
***********/

/* loops is predetermined in decompiler */
.decl Loop(begin: Insn, end: Insn)

Loop(begin, endHead):-
	_Goto(end, begin),
	BasicBlockHead(endHead, end),
	contains("(loop)", begin).

/* all basic blocks in loop */
.decl BBInLoop(loop:Insn, bb: Insn)

BBInLoop(loop, bb):-
	Loop(loop, end),
	ReachableBtwBB(loop, bb),
	ReachableBtwBB(bb, end).

/* the exit insn of a loop */
.decl ExitLoop(loop: Insn, break: Insn)

ExitLoop(loop, break):-
	BBInLoop(loop, bb),
	BasicBlockHead(bb, break),
	_Branch(break, _, outside, _),
	!BBInLoop(loop, outside).


