/* 
Numeric Overflow

Strategy: 
1. Action parameters 
2. Math Ops 
3. Results reachable to DB
*/

/***********
** Output **
************/

#if DEBUG
	#if VERBOSE
		.output PossibleOverflowVar
	#endif

	.output PossibleOverflow
	.output OverflowCheck
	.output UnderflowCheck
#endif

.output OverflowViolation

/************/


/* variables with dynamic input (action parameters)*/
.decl PossibleOverflowVar(var: Var)

PossibleOverflowVar(var):-
	AllActionParam(_, _, param),
	pointer.VarPointsTo(var, param).

/* arithmetic result of vulnerable var */
.decl PossibleOverflow(insn: Insn, var: Var)

PossibleOverflow(insn, result):-
	PossibleOverflowVar(var),
	_AssignVar(insn, result, var),
	(_AssignType(insn, result, "Sub");
	_AssignType(insn, result, "Add")).


/* overflow and underflow checks for 'asset' type */
.decl UnderflowCheck(var:Var)

UnderflowCheck(result):-
	PossibleOverflow(_, result),
	pointer.VarPointsTo(var, result),
	_AssignType(_, bool, "LeX"),
	_AssignVar(_, bool, var),
	_AssignVar(_, bool, other),
	_SimpleAssign(_, other, "-4611686018427387904").

.decl OverflowCheck(var:Var)

OverflowCheck(result):-
	PossibleOverflow(_, result),
	pointer.VarPointsTo(var, result),
	_AssignType(_, bool, "LtX"),
	_AssignVar(_, bool, var),
	_AssignVar(_, bool, other),
	_SimpleAssign(_, other, "4611686018427387904").


/* violation */
.decl OverflowViolation(action: Function, insn: Insn)

// not asset type and the result is used to store in DB
OverflowViolation(action, insn):-
	PossibleOverflow(insn, result),
	(!OverflowCheck(result);
	!UnderflowCheck(result)),
	DBData(_, var),
	pointer.VarPointsTo(var, result),
	_FuncInsn(function,insn),
	ActionFuncReachable(action, function, _).