/* 
Missing Authorisation

Strategy: 
1. DB Insn
2. Not preceded by require_auth()

Three layers:
	Intra-procedural: check if the DBOps are dominated by require_auth whithin same function
	Inter-procedural: check if require_auth dominate functions with DBOps (payer variables set mataching)
	Flow-sensitive: check if require_auth dominate the function call with the correpsonding payer varaible (ordered matching)
*/

/***********
** Output **
************/

#if DEBUG
	#if VERBOSE
		.output SafeDBOps
		.output SafeDBOpsInAction
		.output PossibleAuthViolation
		.output PayerInFunc
		.output PayerInFuncCallPointsTo
	#endif
	.output AuthorisedPayerForDB
#endif

.output AuthViolation

/************/

/* violation DBinsn and its actions */
.decl _AuthViolation(action: Function, insn: Insn)
.decl AuthViolation(action: Function, insn: Insn, table: symbol)

/* require_auth dom DBOps wihtin CFG */
.init auth_dom_db = CFGDom

auth_dom_db.Src(check):-
	_FuncCall(check, _, "require_auth").

auth_dom_db.Target(target):-
	DBInsn(target, _).



/*********************
** Intra-procedural **
**********************/

/* safe DBOps with require_auth within same function */
.decl SafeDBOps(dbInsn: Insn)

// only safe if the payers are the same in both instructions
SafeDBOps(dbInsn):-
	auth_dom_db.IntraSrcDomTarget(check, dbInsn),
	_ActualArgs(check, "require_auth", 0, authVar),
	DBInsn(dbInsn, payerVar),
	pointer.VarPointsTo(authVar, user),
	pointer.VarPointsTo(payerVar, user).


// db_update with same payer
SafeDBOps(dbInsn):-
	DBUpdateSamePayer(dbInsn),
	(auth_dom_db.IntraSrcDomTarget(_, dbInsn);
	auth_dom_db.InterSrcDomTarget(_, dbInsn)).


// Result obtianed from intra-procedrual analysis
.decl PossibleAuthViolation(insn: Insn)

PossibleAuthViolation(insn):-
	DBInsn(insn, _),
	!SafeDBOps(insn).



/*********************
** Inter-procedural **
**********************/

/* payer is authorised before dbInsn */
.decl AuthorisedPayerForDB(authInsn: Insn, payer: Var, dbInsn: Insn)

AuthorisedPayerForDB(check, payer, dbInsn):-
	auth_dom_db.InterSrcDomTarget(check, dbInsn),
	_ActualArgs(check, "require_auth", 0, authVar),
	pointer.VarPointsTo(authVar, payer).



/*  Possible false positive
	Action1(){
		1: require_auth (A) // Auth(A)
		2: Func3(A)
		3: Func3(B)
	}

	Action2(){
		4: require_auth (A) // Auth(A)
		5: Func3(A)
	}

	Func3(C){
		6: DbOps(C) // C -> A, C -> B
	}
*/

/* Exempt the actions calling unsafe dbops, but with safe payers */
.decl SafeDBOpsInAction(action: Function, dbInsn: Insn)

SafeDBOpsInAction(action, dbInsn):-
	PossibleAuthViolation(dbInsn),
	AuthorisedPayerForDB(authInsn, to, dbInsn),
	DBInsn(dbInsn, payer),
	pointer.VarPointsTo(payer, to),
	ActionFuncReachable(action, _, authInsn),
	ActionFuncReachable(action, _, dbInsn).

/* Case:
	Func1(){
		1: require_auth (A) // Auth(A)
		2: Func2(A)
		3: Func2(B)
	}

	Func2(C){
		4: DbOps(C) // C -> A, C -> B
	}

	Expect violation at 4
*/

// If miss any payer authorisation 
_AuthViolation(action, dbInsn):-
	PossibleAuthViolation(dbInsn),
	DBInsn(dbInsn, _),
	!AuthorisedPayerForDB(_, to, dbInsn),
	!SafeDBOpsInAction(action, dbInsn),
	DBInsn(dbInsn, payer),
	pointer.VarPointsTo(payer, to),
	ActionFuncReachable(action, _, dbInsn).


/*******************
** Flow-sensitive **
********************/

/* Case
	Func1(){
		1: require_auth (B) // Auth(B)
		2: Func2(A) // A
		3: require_auth (A) // Auth(A)
		4: Func2(B) // B
	}
	Func2(C){
		5: Db_insn: Db_Store(C) // C -> A, C -> B
	}

	Expect violation at 5
*/

/* reverse propogate payer from dbInsn back to function parameter 
if it's passed by parameter */
.decl PayerInFunc(dbInsn: Insn, payerVar: Var, func: Function)

// payerVar in dbOps
PayerInFunc(dbInsn, payerVar, func):-
	PossibleAuthViolation(dbInsn),
	_FuncInsn(func, dbInsn),
	DBInsn(dbInsn, payerVar).

// All the payer var within the function
PayerInFunc(dbInsn, to, func):-
	PayerInFunc(dbInsn, from, func),
	pointer.IntraCopyAssign(_, from, to).

/* capture payer points to if payer is passed by parameters */
.decl PayerInFuncCallPointsTo(dbInsn: Insn, to: Var, funcCall: Insn)

PayerInFuncCallPointsTo(dbInsn, to, funcCall):-
	PayerInFunc(dbInsn, formalVar, func),
	_FormalArgs(_, func, index, formalVar),
	_ActualArgs(funcCall, func, index, actualVar),
	pointer.VarPointsTo(actualVar, to).

/* for mixed order require_auth and DBOps function call */
_AuthViolation(action, dbInsn):-
	PayerInFuncCallPointsTo(dbInsn, to, funcCall),
	DBInsn(dbInsn, _),
	!auth_dom_db.SrcDomFunc(check, _, funcCall),
	_ActualArgs(check, "require_auth", 0, authVar),
	pointer.VarPointsTo(authVar, to),
	ActionFuncReachable(action, _, dbInsn).

/* add table reference */
AuthViolation(action, dbInsn, table):-
	_AuthViolation(action, dbInsn),
	TableReference(dbInsn, table).

/* add table reference */
AuthViolation(action, dbInsn, "Unkown Table"):-
	_AuthViolation(action, dbInsn),
	!TableReference(dbInsn, _).

